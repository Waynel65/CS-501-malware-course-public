#include <windows.h>
#include <string>
#include <iostream>
#include <winhttp.h>


std::string makeHttpRequest(std::string fqdn, int port, std::string uri, bool useTLS){
    std::string result;
    // Your code here
    std::string transport;
    std::string url;
    if(useTLS){
        transport = "https";
    }else{
        transport = "http";
    }
    url = transport + "://" + fqdn + ":" + std::to_string(port) + uri;
    // convert fqdn into LPCWSTR
    std::wstring fqdn_temp = std::wstring(fqdn.begin(), fqdn.end());
    LPCWSTR fqdn_cw = fqdn_temp.c_str();
    // convert uri to LPCWSTR
    std::wstring uri_temp = std::wstring(uri.begin(), uri.end());
    LPCWSTR uri_cw = uri_temp.c_str();
    std::cout << "debug: " << url << std::endl;
    HINTERNET hSession = ::WinHttpOpen(L"WinHTTP Example/1.0",
                                     WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY,
                                     WINHTTP_NO_PROXY_NAME,
                                     WINHTTP_NO_PROXY_BYPASS, 0);
    if (hSession) {
        std::cout << "opened session successfully" << std::endl;
        HINTERNET hConnect = ::WinHttpConnect(hSession, fqdn_cw, port, 0);
        if (hConnect) {
            std::cout << "connect successfully" << std::endl;
            HINTERNET hRequest = ::WinHttpOpenRequest(hConnect, 
                                                    L"GET", 
                                                    uri_cw, 
                                                    NULL, 
                                                    WINHTTP_NO_REFERER, 
                                                    WINHTTP_DEFAULT_ACCEPT_TYPES, 0);
            // disable certificate validation
            DWORD dwFlags = SECURITY_FLAG_IGNORE_UNKNOWN_CA | SECURITY_FLAG_IGNORE_CERT_DATE_INVALID | SECURITY_FLAG_IGNORE_CERT_CN_INVALID | SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE;
            ::WinHttpSetOption(hRequest, WINHTTP_OPTION_SECURITY_FLAGS, &dwFlags, sizeof(dwFlags));
            if (hRequest) {
                std::cout << "open request successfully" << std::endl;
                if (::WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, WINHTTP_NO_REQUEST_DATA, 0, 0, 0)) {
                    std::cout << "send request successfully" << std::endl;
                    if (::WinHttpReceiveResponse(hRequest, NULL)) {
                        std::cout << "receive response successfully" << std::endl;
                        DWORD dwSize = 0;
                        DWORD dwDownloaded = 0;

                        do{
                            dwSize = 0;
                            if (!::WinHttpQueryDataAvailable(hRequest, &dwSize)) {
                                std::cout << "query data available failed" << std::endl;
                                break;
                            }
                            if (!dwSize) {
                                std::cout << "no data available" << std::endl;
                                break;
                            }
                            LPSTR pszOutBuffer = new char[dwSize + 1];
                            if (!pszOutBuffer) {
                                std::cout << "out of memory" << std::endl;
                                break;
                            }
                            ZeroMemory(pszOutBuffer, dwSize + 1);
                            if (!::WinHttpReadData(hRequest, (LPVOID)pszOutBuffer, dwSize, &dwDownloaded)) {
                                std::cout << "read data failed" << std::endl;
                                delete[] pszOutBuffer;
                                break;
                            }
                            result.append(pszOutBuffer);
                            delete[] pszOutBuffer;
                        } while (dwSize > 0);

                        // if(::WinHttpQueryDataAvailable(hRequest, &dwSize)){
                        //     // instead of testing on the function, we should test on dwSize
                        //     std::cout << "query data available successfully" << std::endl;
                        //     LPSTR pszOutBuffer = new char[dwSize+1];
                        //     if(::WinHttpReadData(hRequest, (LPVOID)pszOutBuffer, dwSize, &dwDownloaded)){
                        //         std::cout << "read data successfully" << std::endl;
                        //         pszOutBuffer[dwSize] = 0;
                        //         result = pszOutBuffer;
                        //     }
                        //     delete[] pszOutBuffer;
                        // }
                    }
                }
                WinHttpCloseHandle(hRequest);
            }
            WinHttpCloseHandle(hConnect);
        }
        WinHttpCloseHandle(hSession);
    }

    return result;
}

int main(int argc,  char* argv[]){
    if(argc !=5){
        std::cout << "Incorrect number of arguments: you need 4 positional arguments" << std::endl;
        return 0;
    }

    std::string fqdn = std::string(argv[1]);
    int port = std::stoi( argv[2] );

    std::string uri = std::string(argv[3]);
    int  useTLS =std::stoi(argv[4]);
    bool tls;
    
    if (useTLS == 1){
        tls = true;
    } else if (useTLS == 0){
        tls = false;

    } else{
        std::cout << "bad value for useTls" << std::endl;
        return 0;
    }
     std::cout << makeHttpRequest(fqdn,  port, uri, tls) << std::endl;
    return 0;
    
}